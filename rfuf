#!/bin/bash
RED='\033[0;31m';
GREEN='\033[0;32m';
YELLOW='\033[1;33m';
BLUE='\033[0;34m';
NC='\033[0m';
PURPLE='\033[01;35m';
CYAN='\033[01;36m';
WHITE='\033[01;37m';
BOLD='\033[1m';
UNDERLINE='\033[4m';

echo -e "${YELLOW}
         __          __  _ 
        / _|        / _|| |
  _ __ | |_  _   _ | |_ | |
 | '__||  _|| | | ||  _|| |
 | |   | |  | |_| || |  |_|
 |_|   |_|   \__,_||_|  (_)
                           
 ${GREEN}@winteriscoming${NC}";


while getopts ":d:" input;do
        case "$input" in
                d) domain=${OPTARG}
                        ;;
                esac
        done
if [ -z "$domain" ]     
        then
                echo "Please give a domain like \"-d domain.com\""
                exit 1
fi

mkdir .$domain 2>/dev/null
echo "";
echo -e "${RED}${BOLD}ðŸ”´ðŸ”´ ${UNDERLINE}Finding Subdomains for $domain ${NC}ðŸ”´ðŸ”´";
echo "";

echo -e "${GREEN}ðŸŸ¢ âž¡ Passive Subdomains Gathering for $domain â¬… ðŸŸ¢${NC}";

# sectrails
echo -ne "${BLUE}Security Trails: "
sectrails $domain 2>/dev/null > sectrails.$domain.txt;
echo -e "${YELLOW}$(wc -l sectrails.$domain.txt 2>/dev/null| cut -d' ' -f1) subdomains${NC}";
cat sectrails.$domain.txt 2>/dev/null | anew raw.txt;
mv sectrails.$domain.txt .$domain/ 2>/dev/null ;
echo "";

# Subfinder
echo -ne "${BLUE}Subfinder: "
subfinder -d $domain -silent 2>/dev/null > subfinder.$domain.txt;
echo -e "${YELLOW}$(wc -l subfinder.$domain.txt 2>/dev/null | cut -d' ' -f1) subdomains (${RED}$(cat subfinder.$domain.txt 2>/dev/null| anew raw.txt | anew new-subfinder.$domain.txt | wc -l) new)${NC}";
cat new-subfinder.$domain.txt 2>/dev/null;
mv subfinder.$domain.txt new-subfinder.$domain.txt .$domain/ 2>/dev/null;
echo "";

# assetfinder
echo -ne "${BLUE}Assetfinder: "
assetfinder --subs-only $domain 2>/dev/null | grep -v '@' | sed 's/^\.//g' | sed 's/\*\.//g' | sort -u > assetfinder.$domain.txt;
echo -e "${YELLOW}$(wc -l assetfinder.$domain.txt 2>/dev/null | cut -d' ' -f1) subdomains (${RED}$(cat assetfinder.$domain.txt 2>/dev/null| anew raw.txt | anew new-assetfinder.$domain.txt | wc -l) new)${NC}";
cat new-assetfinder.$domain.txt 2>/dev/null; mv new-assetfinder.$domain.txt .$domain/ 2>/dev/null;
mv assetfinder.$domain.txt .$domain/ 2>/dev/null;
echo "";

# findomain
echo -ne "${BLUE}Findomain: "
findomain -t $domain -u findomain.$domain.txt 1>/dev/null 2>/dev/null;
echo -e "${YELLOW}$(wc -l findomain.$domain.txt 2>/dev/null | cut -d' ' -f1) subdomains (${RED}$(cat findomain.$domain.txt 2>/dev/null| anew raw.txt | anew new-findomain.$domain.txt | wc -l) new)${NC}";
cat new-findomain.$domain.txt 2>/dev/null;
mv new-findomain.$domain.txt .$domain/ 2>/dev/null;
mv findomain.$domain.txt .$domain/ 2>/dev/null;
echo "";

# amass
echo -ne "${BLUE}Amass: "
amass enum -passive -d $domain 2>/dev/null >amass1.txt;
cat amass1.txt | sort -u > amass.$domain.txt;rm amass1.txt;
echo -e "${YELLOW}$(wc -l amass.$domain.txt 2>/dev/null | cut -d' ' -f1) subdomains (${RED}$(cat amass.$domain.txt 2>/dev/null| anew raw.txt | anew new-amass.$domain.txt | wc -l) new)${NC}";
cat new-amass.$domain.txt 2>/dev/null; mv new-amass.$domain.txt .$domain/ 2>/dev/null;
mv amass.$domain.txt .$domain/ 2>/dev/null;
echo "";

# certsh
echo -ne "${BLUE}Cert.sh: "
crtsh $domain 2>/dev/null > certsh1.txt;
cat certsh1.txt | sed 's/\*\.//g' | tr A-Z a-z | grep -vE '^\.' > certsh.$domain.txt; rm certsh1.txt;
echo -e "${YELLOW}$(wc -l certsh.$domain.txt 2>/dev/null | cut -d' ' -f1) subdomains (${RED}$(cat certsh.$domain.txt 2>/dev/null | anew raw.txt | anew new-certsh.$domain.txt | wc -l) new)${NC}";cat new-certsh.$domain.txt;
mv new-certsh.$domain.txt .$domain/ 2>/dev/null;
mv certsh.$domain.txt .$domain/ 2>/dev/null;
echo "";

# rapidns
echo -ne "${BLUE}Rapid DNS: "
rapidns $domain 2>/dev/null > rapidns.$domain.txt;
echo -e "${YELLOW}$(wc -l rapidns.$domain.txt 2>/dev/null | cut -d' ' -f1) subdomains (${RED}$(cat rapidns.$domain.txt 2>/dev/null | anew raw.txt | anew new-rapidns.$domain.txt | wc -l) new)${NC}";
cat new-rapidns.$domain.txt 2>/dev/null; mv new-rapidns.$domain.txt .$domain/;
mv rapidns.$domain.txt .$domain/ 2>/dev/null;
echo "";

# google dorks
echo -ne "${BLUE}Google Dorks: "
sd-goo.sh $domain 2>/dev/null| anew googledorks1.txt 1>/dev/null 2>/dev/null;sleep 5;
sd-goo.sh $domain 2>/dev/null| anew googledorks1.txt 1>/dev/null 2>/dev/null;sleep 5;
sd-goo.sh $domain 2>/dev/null| anew googledorks1.txt 1>/dev/null 2>/dev/null;
cat googledorks1.txt | sort -u > googledorks.$domain.txt; rm googledorks1.txt;
echo -e "${YELLOW}$(wc -l googledorks.$domain.txt 2>/dev/null | cut -d' ' -f1) subdomains (${RED}$(cat googledorks.$domain.txt 2>/dev/null | anew raw.txt | anew new-googledorks.$domain.txt| wc -l) new)${NC}";
cat new-googledorks.$domain.txt 2>/dev/null; mv new-googledorks.$domain.txt .$domain/ 2>/dev/null;
mv googledorks.$domain.txt .$domain/; rm gsd-tmp* 2>/dev/null;
echo "";

# ctfr
echo -ne "${BLUE}CTFR: ";
python3 /opt/ctfr.py -d $domain.com 2>/dev/null | anew ctfr1.txt 1>/dev/null;
cat ctfr1.txt | sed 's/\[-\]  //g' | sed 's/\*\.//g' | grep -vE '!' | tr A-Z a-z | grep -v "^$domain.com" > ctfr.$domain.txt;
echo -e "${YELLOW}$(wc -l ctfr.$domain.txt 2>/dev/null | cut -d' ' -f1) subdomains (${RED}$(cat ctfr.$domain.txt 2>/dev/null | anew raw.txt | anew new-ctfr.$domain.txt| wc -l) new)${NC}";
cat new-ctfr.$domain.txt 2>/dev/null; mv new-ctfr.$domain.txt .$domain/ 2>/dev/null;
rm ctfr1.txt; mv ctfr.$domain.txt .$domain/ 2>/dev/null;
echo "";

# JLDC
echo -ne "${BLUE}JLDC: "
jldc $domain | anew jldc.$domain.txt 1>/dev/null 2>/dev/null;
echo -e "${YELLOW}$(wc -l jldc.$domain.txt 2>/dev/null | cut -d' ' -f1) subdomains (${RED}$(cat jldc.$domain.txt 2>/dev/null | anew raw.txt | anew new-jldc.$domain.txt | wc -l) new)${NC}";
cat new-jldc.$domain.txt 2>/dev/null;
mv new-jldc.$domain.txt .$domain/ 2>/dev/null;
mv jldc.$domain.txt .$domain/ 2>/dev/null;
echo "";

# github
echo -ne "${BLUE}Github: "
EXPORT GITHUB_TOKEN="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" 2>/dev/null;
github-subdomains -t $GITHUB_TOKEN -d $domain -raw 2>/dev/null>github1.txt;sleep 10;
github-subdomains -t $GITHUB_TOKEN -d $domain -raw 2>/dev/null>>github1.txt;sleep 10;
github-subdomains -t $GITHUB_TOKEN -d $domain -raw 2>/dev/null>>github1.txt;sleep 10;
github-subdomains -t $GITHUB_TOKEN -d $domain -raw 2>/dev/null>>github1.txt;sleep 10;
github-subdomains -t $GITHUB_TOKEN -d $domain -raw 2>/dev/null>>github1.txt;
cat github1.txt | grep $domain | sort -u > github.$domain.txt; rm github1.txt 2>/dev/null;
echo -e "${YELLOW}$(wc -l github.$domain.txt 2>/dev/null | cut -d' ' -f1) subdomains (${RED}$(cat github.$domain.txt 2>/dev/null | anew raw.txt | anew new-github.$domain.txt| wc -l) new)${NC}";
cat new-github.$domain.txt 2>/dev/null; mv new-github.$domain.txt .$domain/ 2>/dev/null; 
mv github.$domain.txt .$domain/ 2>/dev/null;
echo "";

# waybackurls
echo -ne "${BLUE}Waybackurls: "
waybackurls $domain | unfurl format %d | sort -u | grep -vE '\.$' | tr A-Z a-z | sort -u > waybackurls.$domain.txt;
echo -e "${YELLOW}$(wc -l waybackurls.$domain.txt 2>/dev/null | cut -d' ' -f1) subdomains (${RED}$(cat waybackurls.$domain.txt 2>/dev/null | anew raw.txt | anew new-waybackurls.$domain.txt | wc -l) new)${NC}";
cat new-waybackurls.$domain.txt 2>/dev/null; mv new-waybackurls.$domain.txt .$domain/ 2>/dev/null;
mv waybackurls.$domain.txt .$domain/ 2>/dev/null;
echo "";

# gau
echo -ne "${BLUE}Gau: "
gau $domain --threads 10 --blacklist ttf,woff,svg,png| unfurl format %d | grep -vE '\.$' | sort -u > gau.$domain.txt;
echo -e "${YELLOW}$(wc -l gau.$domain.txt 2>/dev/null | cut -d' ' -f1) subdomains (${RED}$(cat gau.$domain.txt 2>/dev/null | anew raw.txt | anew new-gau.$domain.txt | wc -l) new)${NC}";
cat new-gau.$domain.txt 2>/dev/null; mv new-gau.$domain.txt .$domain/ 2>/dev/null;
mv gau.$domain.txt .$domain/ 2>/dev/null;
echo "";
echo "";

echo "";
echo -e "${GREEN}ðŸŸ¢ âž¡ Active Subdomains Gathering for $domain â¬… ðŸŸ¢${NC}";
echo "";

# DNS enumeration and information gathering using fierce (not really passiv)
echo -ne "${BLUE}Fierce: "
fierce --domain $domain 2>/dev/null > fierce2.txt;
cat fierce2.txt | grep Found | awk '{print $2}' | sed 's/\.$//g' 2>/dev/null> fierce.$domain.txt;
echo -e "${YELLOW}$(wc -l fierce.$domain.txt 2>/dev/null | cut -d' ' -f1) subdomains (${RED}$(cat fierce.$domain.txt 2>/dev/null | anew raw.txt | anew new-fierce.$domain.txt | wc -l) new)${NC}";
cat new-fierce.$domain.txt 2>/dev/null; mv new-fierce.$domain.txt .$domain/ 2>/dev/null;
rm fierce2.txt 2>/dev/null; mv fierce.$domain.txt .$domain/ 2>/dev/null;

# Zone Transfer
echo -ne "${BLUE}Zone Transfer: "
echo $domain | dnsx -silent -axfr -json | jq '.axfr.chain[].all[]' -r 2>/dev/null | awk '{print $1}'| anew | sed 's/\.$//g' 2>/dev/null > dnsx.$domain.txt;
echo -e "${YELLOW}$(wc -l dnsx.$domain.txt 2>/dev/null | cut -d' ' -f1) subdomains (${RED}$(cat dnsx.$domain.txt 2>/dev/null | anew raw.txt | anew new-dnsx.$domain.txt | wc -l) new)${NC}";
cat new-dnsx.$domain.txt 2>/dev/null; mv new-dnsx.$domain.txt .$domain/ 2>/dev/null;
mv dnsx.$domain.txt .$domain/ 2>/dev/null;

# DNSSEC Zone Walking
echo -ne "${BLUE}DNSSEC Zone Walking:"
python3 /opt/dnsrecon/dnsrecon.py -t zonewalk -d $domain 2>/dev/null | awk '/records/{f=0} f; /will be used/{f=1}' | awk '{print $3}' | grep -v '^zone$' | grep -v "^$domain" | sort -u > zonewalk.$domain.txt;
echo -e "${YELLOW}$(wc -l zonewalk.$domain.txt 2>/dev/null | cut -d' ' -f1) subdomains (${RED}$(cat zonewalk.$domain.txt 2>/dev/null | anew raw.txt | anew new-zonewalk.$domain.txt | wc -l) new)${NC}";
cat new-zonewalk.$domain.txt 2>/dev/null; mv new-zonewalk.$domain.txt .$domain/ 2>/dev/null;
mv zonewalk.$domain.txt .$domain/;

# BRUTEFORCING
echo "";
echo -e "${GREEN}ðŸŸ¢ âž¡ Bruteforcing Subdomains for $domain â¬… ðŸŸ¢${NC}";
echo "";

# amass
echo -ne "${BLUE}Amass: ";
amass enum -active -brute -d $domain 2>/dev/null | grep -v 'No names were discovered' > amass-bruteforce.$domain.txt;
echo -e "${YELLOW}$(wc -l amass-bruteforce.$domain.txt 2>/dev/null | cut -d' ' -f1) subdomains (${RED}$(cat amass-bruteforce.$domain.txt 2>/dev/null | anew raw.txt | anew new-amass-bruteforce.$domain.txt | wc -l) new)${NC}";
cat new-amass-bruteforce.$domain.txt 2>/dev/null; mv new-amass-bruteforce.$domain.txt .$domain/ 2>/dev/null;
mv amass-bruteforce.$domain.txt .$domain/ 2>/dev/null;
echo "";

# puredns
#echo -ne "${BLUE}Puredns: ";
wget -q "https://raw.githubusercontent.com/proabiral/Fresh-Resolvers/master/resolvers.txt" 2>/dev/null; mv resolvers.txt /opt/ 2>/dev/null;
#puredns -q bruteforce ~/bugbounty/wordlists/dns/best-dns-wordlist.txt $domain --resolvers /opt/resolvers.txt -w puredns.txt 1>/dev/null 2>/dev/null;
#echo -e "${YELLOW}$(wc -l puredns.txt 2>/dev/null | cut -d' ' -f1) subdomains (${RED}$(cat puredns.txt | anew all.txt | anew new-puredns.txt | wc -l) new)${NC}";
#cat new-puredns.txt; mv new-puredns.txt .$domain/;
#mv puredns.txt .$domain/;
#echo "";

####################################################################################
####################################################################################

# Sorting the results
echo "";
echo -e "${RED}${BOLD}ðŸ”´ðŸ”´ ${UNDERLINE}Sorting the results for $domain${NC} ðŸ”´ðŸ”´";
cat .$domain/* | grep -v '*' | grep -v ' ' | sort -u 2>/dev/null > all.txt; cat all.txt 2>/dev/null | anew raw.txt; rm all.txt 1>/dev/null 2>/dev/null;
echo -e "Total Unique Found: ${YELLOW}$(wc -l raw.txt 2>/dev/null | cut -d' ' -f1) subdomains${NC}";

####################################################################################
####################################################################################

# Resolving Subdomains
#echo "";
#echo -e "${RED}${BOLD}ðŸ”´ðŸ”´ ${UNDERLINE}Resolving Subdomains${NC} ðŸ”´ðŸ”´";
#echo -ne "${BLUE}Puredns: "
#cat ra.txt | puredns -q resolve --resolvers /opt/resolvers.txt -w resolved.txt 1>/dev/null 2>/dev/null;
#echo -e "${YELLOW}$(wc -l resolved.txt 2>/dev/null | cut -d' ' -f1) subdomains resolved!${NC}";

####################################################################################
####################################################################################

# San (Subject Alternate Name)
#echo -e "${RED}${BOLD}ðŸ”´ðŸ”´ ${UNDERLINE}Subject Alternate Name (SAN)${NC} ðŸ”´ðŸ”´";
#echo -ne "${BLUE}sanenum: "
#cp raw.txt raw-for-san.txt
#interlace -tL raw-for-san.txt -threads 15 -c "sanenum -d _target_ 2>/dev/null" --no-bar | anew san1.txt 1>/dev/null;
#cat san1.txt | grep -va THREAD | grep -a $domain | sed 's/^\*\.//g' | tr A-Z a-z | sort -u | anew san.$domain.txt 1>/dev/null;
#echo -e "${YELLOW}$(wc -l san.$domain.txt | cut -d' ' -f1) subdomains (${RED}$(cat san.$domain.txt | anew raw.txt | anew new-san.$domain.txt | wc -l) new)${NC}";
#cat new-san.$domain.txt; mv new-san.$domain.txt san.$domain.txt .$domain/;
#rm san1.txt; rm raw-for-san.txt

####################################################################################
####################################################################################
# Alterations/Permutations
#echo "";
#echo -e "${RED}${BOLD}ðŸ”´ðŸ”´ ${UNDERLINE}Permutations/Alternations${NC} ðŸ”´ðŸ”´"

#echo -ne "${BLUE}Altdns: ";
#altfuf raw.txt 1>/dev/null 2>/dev/null;
#cat altered.txt | puredns resolve --resolvers /opt/resolvers.txt -q -w altfuf1.txt 1>/dev/null 2>/dev/null;
#cat altfuf1.txt | cut -d' ' -f1 > altfuf.txt;
#echo -e "${YELLOW}$(wc -l altfuf.txt | cut -d' ' -f1) subdomains (${RED}$(cat altfuf.txt | anew all.txt | anew new-altfuf.txt | wc -l) new)${NC}";
#rm altfuf1.txt;
#cat new-altfuf.txt; mv new-altfuf.txt .$domain/;
#cat altfuf.txt | anew resolved.txt 1>/dev/null 2>/dev/null;
#mv altfuf.txt .$domain/; 

####################################################################################
####################################################################################

# Sorting the results again
echo "";
echo -e "${RED}${BOLD}ðŸ”´ðŸ”´ ${UNDERLINE}Sorting the results again for $domain${NC} ðŸ”´ðŸ”´";
echo -e "${BLUE}Total Subdomains: ${YELLOW}$(wc -l raw.txt | cut -d' ' -f1)${NC}";

####################################################################################
####################################################################################

# Ports Scanning
#echo "";
#echo -e "${RED}${BOLD}ðŸ”´ðŸ”´ ${UNDERLINE}Ports Scanning (Top 1000 Ports)${NC} ðŸ”´ðŸ”´"

#echo -ne "${BLUE}Naabu: ";
#naabu -l resolved.txt -retries 1 -warm-up-time 0 -rate 1000 -top-ports 1000 -silent 2>/dev/null| anew ports.txt 1>/dev/null 2>/dev/null;
#naabu -l resolved.txt -retries 1 -warm-up-time 0 -rate 1000 -top-ports 1000 -silent 2>/dev/null | anew ports.txt 1>/dev/null 2>/dev/null;
#echo -e "${YELLOW}Done";

#echo -ne "${BLUE}Nmap ";
#nmap -iL resolved.txt -sV -p- -oX nmap.xml -T3 1>/dev/null 2>/dev/null;
#echo -e "${YELLOW}Done";

# Use nmap or masscan on ur own machine, save the output as an xml file and throw it to brutespray.

####################################################################################
###################################################################################
# Bruteforcing default credentials
#echo "";
#echo -e "${RED}${BOLD}ðŸ”´ðŸ”´ ${UNDERLINE}Bruteforcing Default Credentials${NC} ðŸ”´ðŸ”´"

#echo -ne "${BLUE}Brutespray: ";
#brutespray --file nmap.xml -q 2>/dev/null | grep "ACCOUNT FOUND" | anew brutespray.txt 1>/dev/null;
#echo -e "${YELLOW}$(wc -l brutespray.txt | cut -d' ' -f1) ÙŽAccount Found!${NC}";
####################################################################################
####################################################################################

# Probing
#echo "";
#echo -e "${RED}${BOLD}ðŸ”´ðŸ”´ ${UNDERLINE}Probing the open ports${NC} ðŸ”´ðŸ”´"

#echo -ne "${BLUE}httpx: ";
#cat resolved.txt | httpx -silent -maxhr 999999 | anew alive.all 1>/dev/null 2>/dev/null;
#cat resolved.txt | httpx -silent -maxhr 999999 | anew alive.all 1>/dev/null 2>/dev/null;
#cat resolved.txt | httpx -silent -maxhr 999999 | anew alive.all 1>/dev/null 2>/dev/null;
#cat resolved.txt | httpx -silent -maxhr 999999 | anew alive.all 1>/dev/null 2>/dev/null;
#cat resolved.txt | httpx -silent -maxhr 999999 | anew alive.all 1>/dev/null 2>/dev/null;
#cat ports.txt | grep -vE ":80$" | grep -vE ":443$" | httpx -silent -maxhr 999999 | anew alive.all 1>/dev/null 2>/dev/null;
#cat ports.txt | grep -vE ":80$" | grep -vE ":443$" | httpx -silent -maxhr 999999 | anew alive.all 1>/dev/null 2>/dev/null;
#cat ports.txt | grep -vE ":80$" | grep -vE ":443$" | httpx -silent -maxhr 999999 | anew alive.all 1>/dev/null 2>/dev/null;
#cat ports.txt | grep -vE ":80$" | grep -vE ":443$" | httpx -silent -maxhr 999999 | anew alive.all 1>/dev/null 2>/dev/null;
#cat ports.txt | grep -vE ":80$" | grep -vE ":443$" | httpx -silent -maxhr 999999 | anew alive.all 1>/dev/null 2>/dev/null;
#https-forcer.py -f alive.all | anew alive.txt 1>/dev/null;
#echo -e "${YELLOW}$(wc -l alive.txt | cut -d' ' -f1) webservers found!${NC}";

####################################################################################
####################################################################################

# csprecon
#echo "";
#echo -e "${RED}${BOLD}ðŸ”´ðŸ”´ ${UNDERLINE}Checking for CSP headers${NC} ðŸ”´ðŸ”´"
#echo -ne "${BLUE}cspenum: "
#cp raw.txt raw-for-csp.txt;
#interlace -tL raw-for-csp.txt -threads 6 -c "cspenum -h _target_ 2>/dev/null" --no-bar 2>/dev/null| anew cspenum1.txt 1>/dev/null 2>/dev/null;
#root=$(echo $domain | unfurl format %r);
#cat cspenum1.txt | grep -v THREAD | grep $domain | anew cspenum.$domain.txt 1>/dev/null 2>/dev/null;
#echo -e "${YELLOW}$(wc -l cspenum.$domain.txt | cut -d' ' -f1) subdomains (${RED}$(cat cspenum.$domain.txt | anew raw.txt | anew new-cspenum.$domain.txt | wc -l) new)${NC}";
#cat cspenum.$domain.txt | anew raw.txt 1>/dev/null;
#mv cspenum.$domain.txt .$domain/ 2>/dev/null;
#cat new-cspenum.$domain.txt; mv new-cspenum.$domain.txt cspenum.txt .$domain/ 2>/dev/null;
#rm cspenum1.txt raw-for-csp.txt 2>/dev/null;

####################################################################################
####################################################################################

# spf records
#echo "";
#echo -e "${RED}${BOLD}ðŸ”´ðŸ”´ ${UNDERLINE}Checking for SPF records${NC} ðŸ”´ðŸ”´"
#echo -ne "${BLUE}SPF Records: "
#cat raw.txt | dnsx -txt -resp-only -silent | grep spf | grep -o -P '(?<=:).*(?= )' | sed 's/include:\|ip4:/\n/g' | sed 's/ *$//' > spf-records1.txt;
#cat spf-records1.txt | grep -E '\d$' | sort -u | dnsx -ptr -silent -resp-only | anew spf-ptr.$domain.txt 1>/dev/null;
#cat spf-records1.txt | grep $domain | anew spf-records.$domain.txt 1>/dev/null;
#cat spf-ptr.$domain.txt | grep $root | anew spf-records.$domain.txt 1>/dev/null;
#echo -e "${YELLOW}$(wc -l spf-records1.txt | cut -d' ' -f1) records (${RED}$(cat spf-records.$domain.txt | anew raw.txt | anew new-spf-records.$domain.txt | wc -l) new)${NC}";
#cat new-spf-records.$domain.txt;
#cat new-spf-records.$domain.txt | anew raw.txt | httpx -silent 1>/dev/null;
#mv new-spf-records.$domain.txt spf-records.$domain.txt spf-records1.txt .$domain/;
#mv spf-ptr* .$domain/ 2>/dev/null;
#rm spf-ptr* 2>/dev/null;
#echo "";

####################################################################################
####################################################################################

#echo -e "${RED}${BOLD}ðŸ”´ðŸ”´ ${UNDERLINE}Detecting Firewalls${NC} ðŸ”´ðŸ”´"
#wafw00f -i alive.txt -o - 2>/dev/null | anew wafw00f.txt 1>/dev/null;
#cat wafw00f.txt | awk '{print $2 $3 $4}' | sort | uniq -c | sort -n | awk '{OFS=": ";print $2,"\033[1;33m"$1"\033[0m"}' | tac | anew wafs.txt 2>/dev/null;
#mv wafs.txt wafw00f.txt .$domain/;

####################################################################################
####################################################################################

# Subdomain Takeover
#echo "";
#echo -e "${RED}${BOLD}ðŸ”´ðŸ”´ ${UNDERLINE}Scanning for Subdomain Takeover${NC} ðŸ”´ðŸ”´"

# subjack
#echo -ne "${BLUE}Subjack: "; touch subjack.txt;
#subjack -w resolved.txt -t 30 -ssl -o subjack.txt -c /opt/fingerprints.json 2>/dev/null 1>/dev/null;
#echo -e "${YELLOW}$(wc -l subjack.txt | cut -d' ' -f1) possible takeover!${NC}";
#mv subjack.txt takeovers.txt;

####################################################################################
####################################################################################
